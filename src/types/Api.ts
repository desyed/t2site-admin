import type { paths, components } from '../../api.schema.d'; // generated by openapi-typescript

export type Api = {
  paths: paths;
  components: components;
};

export type ApiPath = keyof paths;

export type ApiPathParams<T extends ApiPath> = paths[T]['parameters'];

export type ApiPathResponse<T extends ApiPath> = T extends keyof paths
  ? paths[T] extends {
      get: {
        responses: {
          200: { content: { 'application/json': { schema: infer S } } };
        };
      };
    }
    ? S
    : never
  : never;

export type ApiPathErrorResponse<T extends ApiPath> = T extends keyof paths
  ? paths[T] extends {
      get: {
        responses: {
          500: { content: { 'application/json': { schema: infer S } } };
        };
      };
    }
    ? S
    : never
  : never;

export type ApiPathRequestBody<T extends ApiPath> = T extends keyof paths
  ? paths[T] extends {
      post: {
        requestBody: { content: { 'application/json': { schema: infer S } } };
      };
    }
    ? S
    : never
  : never;
