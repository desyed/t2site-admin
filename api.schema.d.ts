/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
  '/auth/google': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Redirect to Google OAuth
     * @description Redirect to Google OAuth
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          /** @example {
           *       "redirect_url": "https://example.com/check-auth-session",
           *       "redirect_error": "https://example.com/login"
           *     } */
          'application/x-www-form-urlencoded': {
            redirect_url: string;
            redirect_error: string;
          };
        };
      };
      responses: {
        /**
         * Redirect to Google OAuth
         * @description Redirect to Github OAuth
         */
        301: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description The google login validation error(s) */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example false */
              success: boolean;
              /** @example {
               *       "issues": [
               *         {
               *           "code": "invalid_type",
               *           "expected": "string",
               *           "received": "undefined",
               *           "path": [
               *             "redirect_url"
               *           ],
               *           "message": "Required"
               *         },
               *         {
               *           "code": "invalid_type",
               *           "expected": "string",
               *           "received": "undefined",
               *           "path": [
               *             "redirect_error"
               *           ],
               *           "message": "Required"
               *         }
               *       ],
               *       "name": "ZodError"
               *     } */
              error: {
                issues: {
                  code: string;
                  path: (string | number)[];
                  message?: string;
                }[];
                name: string;
              };
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/github': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Redirect to Github OAuth
     * @description Redirect to Github OAuth
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          /** @example {
           *       "redirect_url": "https://example.com/check-auth-session",
           *       "redirect_error": "https://example.com/login"
           *     } */
          'application/x-www-form-urlencoded': {
            redirect_url: string;
            redirect_error: string;
          };
        };
      };
      responses: {
        /**
         * Redirect to Github OAuth
         * @description Redirect to Github OAuth
         */
        301: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description The github login validation error(s) */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example false */
              success: boolean;
              /** @example {
               *       "issues": [
               *         {
               *           "code": "invalid_type",
               *           "expected": "string",
               *           "received": "undefined",
               *           "path": [
               *             "redirect_url"
               *           ],
               *           "message": "Required"
               *         },
               *         {
               *           "code": "invalid_type",
               *           "expected": "string",
               *           "received": "undefined",
               *           "path": [
               *             "redirect_error"
               *           ],
               *           "message": "Required"
               *         }
               *       ],
               *       "name": "ZodError"
               *     } */
              error: {
                issues: {
                  code: string;
                  path: (string | number)[];
                  message?: string;
                }[];
                name: string;
              };
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/auth/signup': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Sign up */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Signup request */
      requestBody: {
        content: {
          'application/json': {
            name: string;
            /** Format: email */
            email: string;
            password: string;
          };
        };
      };
      responses: {
        /** @description Signup success */
        200: {
          headers: {
            /** @description The cookie to set the refresh token */
            'Set-Cookie'?: string;
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              user: {
                id: string;
                email: string;
                name: string;
                avatar: string | null;
                emailVerified: string | unknown | unknown;
                authType: string;
              };
              currentProject: {
                id: string;
                organizationId: string;
                name: string;
                siteUrl: string | null;
                icon: string | null;
              };
              userOrganization: {
                currentOrganization: {
                  id: string;
                  name: string;
                  /** @enum {string} */
                  role: 'owner' | 'admin' | 'member';
                  logo: string | null;
                  slug: string | null;
                  createdAt: string;
                };
                organizations: {
                  id: string;
                  name: string;
                  /** @enum {string} */
                  role: 'owner' | 'admin' | 'member';
                  logo: string | null;
                  slug: string | null;
                  createdAt: string;
                }[];
              };
              userAgent: string;
              expiresAt: string;
              access_token: string;
            };
          };
        };
        /** @description The signup validation error(s) */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example false */
              success: boolean;
              /** @example {
               *       "issues": [
               *         {
               *           "code": "invalid_type",
               *           "expected": "string",
               *           "received": "undefined",
               *           "path": [
               *             "name"
               *           ],
               *           "message": "Required"
               *         },
               *         {
               *           "code": "invalid_type",
               *           "expected": "string",
               *           "received": "undefined",
               *           "path": [
               *             "email"
               *           ],
               *           "message": "Required"
               *         },
               *         {
               *           "code": "invalid_type",
               *           "expected": "string",
               *           "received": "undefined",
               *           "path": [
               *             "password"
               *           ],
               *           "message": "Required"
               *         }
               *       ],
               *       "name": "ZodError"
               *     } */
              error: {
                issues: {
                  code: string;
                  path: (string | number)[];
                  message?: string;
                }[];
                name: string;
              };
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/auth/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Login */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Login request */
      requestBody: {
        content: {
          'application/json': {
            /** Format: email */
            email: string;
            password: string;
          };
        };
      };
      responses: {
        /** @description Login success */
        200: {
          headers: {
            /** @description The cookie to set the refresh token */
            'Set-Cookie'?: string;
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              user: {
                id: string;
                email: string;
                name: string;
                avatar: string | null;
                emailVerified: string | unknown | unknown;
                authType: string;
              };
              access_token: string;
            };
          };
        };
        /** @description Invalid credentials */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              code: 'invalid-credentials';
              /** @enum {string} */
              message: 'Invalid credentials';
            };
          };
        };
        /** @description The login validation error(s) */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example false */
              success: boolean;
              /** @example {
               *       "issues": [
               *         {
               *           "code": "invalid_type",
               *           "expected": "string",
               *           "received": "undefined",
               *           "path": [
               *             "email"
               *           ],
               *           "message": "Required"
               *         },
               *         {
               *           "code": "invalid_type",
               *           "expected": "string",
               *           "received": "undefined",
               *           "path": [
               *             "password"
               *           ],
               *           "message": "Required"
               *         }
               *       ],
               *       "name": "ZodError"
               *     } */
              error: {
                issues: {
                  code: string;
                  path: (string | number)[];
                  message?: string;
                }[];
                name: string;
              };
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/auth/refresh': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Refresh */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie: {
          't2site-rt': string;
        };
      };
      requestBody?: never;
      responses: {
        /** @description New access token */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              access_token: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              code: 'unauthorized';
              /** @enum {string} */
              message: 'Unauthorized';
            };
          };
        };
        /** @description The refresh validation error(s) */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example false */
              success: boolean;
              /** @example {
               *       "issues": [
               *         {
               *           "code": "invalid_type",
               *           "expected": "string",
               *           "received": "undefined",
               *           "path": [
               *             "t2site-rt"
               *           ],
               *           "message": "t2siteRt cookie is required"
               *         }
               *       ],
               *       "name": "ZodError"
               *     } */
              error: {
                issues: {
                  code: string;
                  path: (string | number)[];
                  message?: string;
                }[];
                name: string;
              };
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/auth/logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Logout */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Logout';
              /** @enum {boolean} */
              success: true;
            };
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/verification/email/verify': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Verify email */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            code: string;
          };
        };
      };
      responses: {
        /** @description Email verified */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Email has been verified';
              /** @enum {boolean} */
              success: true;
              access_token: string;
              user: {
                id: string;
                email: string;
                name: string;
                avatar: string | null;
                emailVerified: string | unknown | unknown;
                /** @enum {string} */
                authType: 'emailPassword';
              };
            };
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        /** @description The verification email validation error(s) */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example false */
              success: boolean;
              /** @example {
               *       "issues": [
               *         {
               *           "code": "invalid_type",
               *           "expected": "string",
               *           "received": "undefined",
               *           "path": [
               *             "code"
               *           ],
               *           "message": "Required"
               *         }
               *       ],
               *       "name": "ZodError"
               *     } */
              error: {
                issues: {
                  code: string;
                  path: (string | number)[];
                  message?: string;
                }[];
                name: string;
              };
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/verification/email/send': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Send email verification code */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Email verification code sent';
              /** @enum {boolean} */
              success: true;
              email: string;
            };
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              message: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/session': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get session */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Session response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              user: {
                id: string;
                email: string;
                name: string;
                avatar: string | null;
                emailVerified: string | unknown | unknown;
                authType: string;
              };
              currentProject: {
                id: string;
                organizationId: string;
                name: string;
                siteUrl: string | null;
                icon: string | null;
              };
              userOrganization: {
                currentOrganization: {
                  id: string;
                  name: string;
                  /** @enum {string} */
                  role: 'owner' | 'admin' | 'member';
                  logo: string | null;
                  slug: string | null;
                  createdAt: string;
                };
                organizations: {
                  id: string;
                  name: string;
                  /** @enum {string} */
                  role: 'owner' | 'admin' | 'member';
                  logo: string | null;
                  slug: string | null;
                  createdAt: string;
                }[];
              };
              userAgent: string;
              expiresAt: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Session not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'User session not found, please login again';
              /** @enum {string} */
              code: 'USER_SESSION_EXPIRED';
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/organizations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get organizations */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Organizations response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              organizations: {
                id: string;
                name: string;
                slug: string | null;
                logo: string | null;
                isCurrent?: boolean;
                role: string;
              }[];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Create organization */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Create organization request */
      requestBody: {
        content: {
          /** @example {
           *       "name": "My Organization"
           *     } */
          'application/json': {
            name: string;
          };
        };
      };
      responses: {
        /** @description Organization created successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              organizationId: string;
              access_token: string;
              /** @enum {boolean} */
              success: true;
              /** @enum {string} */
              message: 'Project has created successfully';
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unprocessable entity */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example false */
              success: boolean;
              /** @example {
               *       "issues": [
               *         {
               *           "code": "invalid_type",
               *           "expected": "string",
               *           "received": "undefined",
               *           "path": [
               *             "name"
               *           ],
               *           "message": "Required"
               *         }
               *       ],
               *       "name": "ZodError"
               *     } */
              error: {
                issues: {
                  code: string;
                  path: (string | number)[];
                  message?: string;
                }[];
                name: string;
              };
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/organizations/change-current': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Change current organization */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Change current organization request */
      requestBody: {
        content: {
          'application/json': {
            organizationId: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              currentOrganizationId: string;
              /** @enum {boolean} */
              success: true;
              /** @enum {string} */
              message: 'Organization has changed successfully';
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Organization not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Organization not found';
              /** @enum {string} */
              code: 'organization-not-found';
            };
          };
        };
        /** @description Unprocessable entity */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example false */
              success: boolean;
              /** @example {
               *       "issues": [
               *         {
               *           "code": "invalid_type",
               *           "expected": "string",
               *           "received": "undefined",
               *           "path": [
               *             "organizationId"
               *           ],
               *           "message": "Organization id is required"
               *         }
               *       ],
               *       "name": "ZodError"
               *     } */
              error: {
                issues: {
                  code: string;
                  path: (string | number)[];
                  message?: string;
                }[];
                name: string;
              };
            };
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/organizations/invite/:organizationId?': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Invite members to organization
     * @description Invite members to organization, if organizationId path param is not provided,  the current organization will be used from session
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          organizationId: string;
        };
        cookie?: never;
      };
      /** @description Invite members to organization request */
      requestBody: {
        content: {
          /** @example {
           *       "members": [
           *         {
           *           "name": "John Doe",
           *           "email": "john.doe@example.com",
           *           "role": "admin"
           *         }
           *       ]
           *     } */
          'application/json': {
            members: {
              name?: string;
              /** Format: email */
              email: string;
              /**
               * @default member
               * @enum {string}
               */
              role?: 'owner' | 'admin' | 'member';
            }[];
            message?: string;
          };
        };
      };
      responses: {
        /** @description Members invited to organization */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Members invited to organization';
              /** @enum {boolean} */
              success: true;
              data: {
                organizationId: string;
              };
            };
          };
        };
        /** @description Invalid request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json':
              | {
                  /** @enum {string} */
                  code: 'members-already-exist';
                  membersError: {
                    members?: {
                      /** @enum {string} */
                      message: 'Members already exist';
                      members: {
                        email: string;
                        /** @enum {string} */
                        role: 'owner' | 'admin' | 'member';
                        organizationId: string;
                      }[];
                    };
                  };
                }
              | {
                  /** @enum {string} */
                  code: 'invalid-member-role';
                  membersError: {
                    /** @enum {string} */
                    message: 'Invited members role is invalid';
                    members: {
                      email: string;
                      /** @enum {string} */
                      role: 'owner' | 'admin' | 'member';
                      message: string;
                      name?: string;
                    }[];
                  };
                };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Organization not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Organization not found';
              /** @enum {string} */
              code: 'organization-not-found';
            };
          };
        };
        /** @description Unprocessable entity */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json':
              | {
                  /** @example false */
                  success: boolean;
                  /** @example {
                   *       "issues": [
                   *         {
                   *           "code": "invalid_type",
                   *           "expected": "array",
                   *           "received": "undefined",
                   *           "path": [
                   *             "members"
                   *           ],
                   *           "message": "Required"
                   *         }
                   *       ],
                   *       "name": "ZodError"
                   *     } */
                  error: {
                    issues: {
                      code: string;
                      path: (string | number)[];
                      message?: string;
                    }[];
                    name: string;
                  };
                }
              | {
                  organizationId?: string;
                };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/organizations/invite/resend/:invitedMemberId/:organizationId?': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Resend invite member to organization */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          invitedMemberId: string;
          organizationId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Resend invite member to organization */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Invite member resent';
              /** @enum {boolean} */
              success: true;
              data: {
                invitedMember: {
                  id: string;
                  email: string;
                  /** @enum {string} */
                  role: 'owner' | 'admin' | 'member';
                };
              };
            };
          };
        };
        /** @description Bad request when user request is invalid, invalid user, user role or invalid organization */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              message: string;
              /** @enum {string} */
              code: 'resend-invite-member-failed';
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Organization not found or invited member not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json':
              | {
                  /** @enum {string} */
                  message: 'Organization not found';
                  /** @enum {string} */
                  code: 'organization-not-found';
                }
              | {
                  /** @enum {string} */
                  message: 'Invited member not found';
                  /** @enum {string} */
                  code: 'invited-member-not-found';
                };
          };
        };
        /** @description Unprocessable entity */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example false */
              success: boolean;
              /** @example {
               *       "issues": [
               *         {
               *           "code": "invalid_type",
               *           "expected": "string",
               *           "received": "undefined",
               *           "path": [
               *             "invitedMemberId"
               *           ],
               *           "message": "Required"
               *         }
               *       ],
               *       "name": "ZodError"
               *     } */
              error: {
                issues: {
                  code: string;
                  path: (string | number)[];
                  message?: string;
                }[];
                name: string;
              };
            };
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/organizations/invite/cancel/:invitedMemberId/:organizationId?': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Cancel invite member to organization */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          invitedMemberId: string;
          organizationId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Invite member canceled */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Invite member canceled';
              /** @enum {boolean} */
              success: true;
              data: {
                invitedMember: {
                  id: string;
                  email: string;
                  /** @enum {string} */
                  role: 'owner' | 'admin' | 'member';
                };
              };
            };
          };
        };
        /** @description Bad request when user request is invalid, invalid user, user role or invalid organization */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              message: string;
              /** @enum {string} */
              code: 'cancel-invite-member-failed';
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Organization not found or invited member not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json':
              | {
                  /** @enum {string} */
                  message: 'Organization not found';
                  /** @enum {string} */
                  code: 'organization-not-found';
                }
              | {
                  /** @enum {string} */
                  message: 'Invited member not found';
                  /** @enum {string} */
                  code: 'invited-member-not-found';
                };
          };
        };
        /** @description Unprocessable entity */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example false */
              success: boolean;
              /** @example {
               *       "issues": [
               *         {
               *           "code": "invalid_type",
               *           "expected": "string",
               *           "received": "undefined",
               *           "path": [
               *             "invitedMemberId"
               *           ],
               *           "message": "Required"
               *         }
               *       ],
               *       "name": "ZodError"
               *     } */
              error: {
                issues: {
                  code: string;
                  path: (string | number)[];
                  message?: string;
                }[];
                name: string;
              };
            };
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/organizations/invited-members/:organizationId?': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get invited members
     * @description Get invited members, if organizationId path param is not provided,  the current organization will be used from session
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          organizationId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Invited members */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data: {
                members: {
                  id: string;
                  email: string;
                  /** @enum {string} */
                  role: 'owner' | 'admin' | 'member';
                  name: string | null;
                  organizationId: string;
                  invitedBy: {
                    id: string;
                    name: string;
                    avatar: string | null;
                    email: string;
                    currentUser: boolean;
                  };
                  /** @enum {string} */
                  status: 'pending' | 'accepted' | 'rejected';
                  expiresAt: string;
                  createdAt: string;
                }[];
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Organization not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Organization not found';
              /** @enum {string} */
              code: 'organization-not-found';
            };
          };
        };
        /** @description Unprocessable entity */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json':
              | {
                  /** @example false */
                  success: boolean;
                  error: {
                    issues: {
                      code: string;
                      path: (string | number)[];
                      message?: string;
                    }[];
                    name: string;
                  };
                }
              | {
                  organizationId?: string;
                };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/organizations/invitations/:invitedMemberId': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get invitations details */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          invitedMemberId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Invitations details */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              message: string;
              /** @enum {boolean} */
              success: true;
              data: {
                id: string;
                email: string;
                /** @enum {string} */
                role: 'owner' | 'admin' | 'member';
                name: string | null;
                /** @enum {string} */
                status: 'pending' | 'accepted' | 'rejected';
                invitedById: string;
                expiresAt: string;
                organization: {
                  id: string;
                  name: string;
                  slug: string | null;
                  logo: string | null;
                };
                invitedBy: {
                  id: string;
                  name: string;
                  email: string;
                  avatar: string | null;
                };
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Invited member not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Invited member not found';
            };
          };
        };
        /** @description Unprocessable entity */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example false */
              success: boolean;
              /** @example {
               *       "issues": [
               *         {
               *           "code": "invalid_type",
               *           "expected": "string",
               *           "received": "undefined",
               *           "path": [
               *             "invitedMemberId"
               *           ],
               *           "message": "Required"
               *         }
               *       ],
               *       "name": "ZodError"
               *     } */
              error: {
                issues: {
                  code: string;
                  path: (string | number)[];
                  message?: string;
                }[];
                name: string;
              };
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/organizations/invitations/prompt/:invitedMemberId': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Accept/Reject invitation */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          invitedMemberId: string;
        };
        cookie?: never;
      };
      /** @description Prompt invitation request */
      requestBody: {
        content: {
          'application/json': {
            /** @enum {string} */
            promptType: 'accept' | 'reject';
          };
        };
      };
      responses: {
        /** @description Invitation prompted */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Invitation prompted';
              /** @enum {string} */
              promptType: 'accept' | 'reject';
              data?: {
                changeOrganizationId: string;
              };
              /** @enum {boolean} */
              success: true;
              access_token?: string;
            };
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              message: 'Invitation expired' | 'Invalid prompt type';
              code: 'invalid-prompt-type' | 'invitation-expired';
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Invited member not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Invitation not found';
            };
          };
        };
        /** @description Unprocessable entity */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json':
              | {
                  /** @example false */
                  success: boolean;
                  /** @example {
                   *       "issues": [
                   *         {
                   *           "expected": "'accept' | 'reject'",
                   *           "received": "undefined",
                   *           "code": "invalid_type",
                   *           "path": [
                   *             "promptType"
                   *           ],
                   *           "message": "Required"
                   *         }
                   *       ],
                   *       "name": "ZodError"
                   *     } */
                  error: {
                    issues: {
                      code: string;
                      path: (string | number)[];
                      message?: string;
                    }[];
                    name: string;
                  };
                }
              | {
                  invitedMemberId: string;
                };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/organizations/members/:organizationId?': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get organization members
     * @description Get organization members, if organizationId path param is not provided,  the current organization will be used from session
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          organizationId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Organization members */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data: {
                members: {
                  id: string;
                  /** @enum {string} */
                  role: 'owner' | 'admin' | 'member';
                  email: string;
                  user: {
                    name: string;
                    email: string;
                    avatar: string | null;
                  };
                  organizationId: string;
                  createdAt: string;
                }[];
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Organization not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Organization not found';
              /** @enum {string} */
              code: 'organization-not-found';
            };
          };
        };
        /** @description Unprocessable entity */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json':
              | {
                  /** @example false */
                  success: boolean;
                  error: {
                    issues: {
                      code: string;
                      path: (string | number)[];
                      message?: string;
                    }[];
                    name: string;
                  };
                }
              | {
                  organizationId?: string;
                };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/organizations/members/:memberId/change-role/:organizationId?': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Change members role */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          organizationId: string;
          memberId: string;
        };
        cookie?: never;
      };
      /** @description Change members role request */
      requestBody: {
        content: {
          'application/json': {
            /** @enum {string} */
            role: 'owner' | 'admin' | 'member';
          };
        };
      };
      responses: {
        /** @description Members role changed */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Member role updated';
              /** @enum {boolean} */
              success: true;
              member: {
                id: string;
                /** @enum {string} */
                role: 'owner' | 'admin' | 'member';
                user: {
                  id: string;
                  email: string;
                  name: string;
                };
              };
            };
          };
        };
        /** @description Failed to removed, when reques bad */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              message: string;
              /** @enum {string} */
              code: 'change-member-role-failed';
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Failed to removed, when reques bad */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              message: string;
              /** @enum {string} */
              code: 'change-member-role-forbidden';
            };
          };
        };
        /** @description Member not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Member not found';
              /** @enum {string} */
              code: 'member-not-found';
            };
          };
        };
        /** @description Unprocessable entity */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json':
              | {
                  /** @example false */
                  success: boolean;
                  /** @example {
                   *       "issues": [
                   *         {
                   *           "expected": "'owner' | 'admin' | 'member'",
                   *           "received": "undefined",
                   *           "code": "invalid_type",
                   *           "path": [
                   *             "role"
                   *           ],
                   *           "message": "Required"
                   *         }
                   *       ],
                   *       "name": "ZodError"
                   *     } */
                  error: {
                    issues: {
                      code: string;
                      path: (string | number)[];
                      message?: string;
                    }[];
                    name: string;
                  };
                }
              | {
                  organizationId?: string;
                  memberId: string;
                };
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/organizations/members/:memberId/:organizationId?': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Remove members from organization */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          organizationId: string;
          memberId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Members removed from organization */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Member removed from organization';
              /** @enum {boolean} */
              success: true;
              member: {
                id: string;
                /** @enum {string} */
                role: 'owner' | 'admin' | 'member';
                user: {
                  id: string;
                  email: string;
                  name: string;
                };
              };
            };
          };
        };
        /** @description Failed to removed, when reques bad */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              message: string;
              code: 'member-remove-failed' | 'invitation-expired';
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'You cannot remove organization member';
              /** @enum {string} */
              code: 'remove-organization-member-forbidden';
            };
          };
        };
        /** @description Organization not found or member not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json':
              | {
                  /** @enum {string} */
                  message: 'Organization not found';
                  /** @enum {string} */
                  code: 'organization-not-found';
                }
              | {
                  /** @enum {string} */
                  message: 'Member not found';
                  /** @enum {string} */
                  code: 'member-not-found';
                };
          };
        };
        /** @description Unprocessable entity */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json':
              | {
                  /** @example false */
                  success: boolean;
                  /** @example {
                   *       "issues": [
                   *         {
                   *           "code": "invalid_type",
                   *           "expected": "string",
                   *           "received": "undefined",
                   *           "path": [
                   *             "memberId"
                   *           ],
                   *           "message": "Required"
                   *         }
                   *       ],
                   *       "name": "ZodError"
                   *     } */
                  error: {
                    issues: {
                      code: string;
                      path: (string | number)[];
                      message?: string;
                    }[];
                    name: string;
                  };
                }
              | {
                  organizationId?: string;
                  memberId: string;
                };
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/organizations/leave/:organizationId?': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Leave organization */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          organizationId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Organization left */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Member left organization';
              /** @enum {boolean} */
              success: true;
              data: {
                changeOrganizationId: string;
              };
              access_token: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'You cannot leave organization';
              /** @enum {string} */
              code: 'leave-organization-forbidden';
            };
          };
        };
        /** @description Organization not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Organization not found';
              /** @enum {string} */
              code: 'organization-not-found';
            };
          };
        };
        /** @description Unprocessable entity */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example false */
              success: boolean;
              error: {
                issues: {
                  code: string;
                  path: (string | number)[];
                  message?: string;
                }[];
                name: string;
              };
            };
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/projects/:organizationId?': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create project */
    post: {
      parameters: {
        query?: {
          organizationId?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Create project request */
      requestBody: {
        content: {
          /** @example {
           *       "name": "Example",
           *       "siteUrl": "example.com"
           *     } */
          'application/json': {
            name: string;
            /** Format: uri */
            siteUrl: string;
          };
        };
      };
      responses: {
        /** @description Project created successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success: boolean;
              /** @enum {string} */
              message: 'Project has created successfully';
              data: {
                id: string;
                organizationId?: string;
                name: string;
                siteUrl: string;
                icon: string | null;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Project creation is not permitted';
              /** @enum {string} */
              code: 'not-permitted-to-create-project';
            };
          };
        };
        /** @description Organization not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Organization not found';
              /** @enum {string} */
              code: 'organization-not-found';
            };
          };
        };
        /** @description Project name already exists */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Project name already exists';
              /** @enum {string} */
              code: 'project-name-already-exists';
              errors: {
                /** @enum {string} */
                name: 'Project name already exists';
              };
            };
          };
        };
        /** @description Unprocessable entity */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json':
              | {
                  /** @example false */
                  success: boolean;
                  /** @example {
                   *       "issues": [
                   *         {
                   *           "code": "invalid_type",
                   *           "expected": "string",
                   *           "received": "undefined",
                   *           "path": [
                   *             "name"
                   *           ],
                   *           "message": "Project name is required"
                   *         },
                   *         {
                   *           "code": "invalid_type",
                   *           "expected": "string",
                   *           "received": "undefined",
                   *           "path": [
                   *             "siteUrl"
                   *           ],
                   *           "message": "Site URL is required"
                   *         }
                   *       ],
                   *       "name": "ZodError"
                   *     } */
                  error: {
                    issues: {
                      code: string;
                      path: (string | number)[];
                      message?: string;
                    }[];
                    name: string;
                  };
                }
              | {
                  organizationId?: string;
                };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/projects': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get projects */
    get: {
      parameters: {
        query?: {
          organizationId?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Projects fetched successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success: boolean;
              data: {
                id: string;
                organizationId?: string;
                name: string;
                siteUrl: string;
                icon: string | null;
              }[];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Organization not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Organization not found';
              /** @enum {string} */
              code: 'organization-not-found';
            };
          };
        };
        /** @description Unprocessable entity */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example false */
              success: boolean;
              error: {
                issues: {
                  code: string;
                  path: (string | number)[];
                  message?: string;
                }[];
                name: string;
              };
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/projects/:projectId': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get project */
    get: {
      parameters: {
        query?: {
          organizationId?: string;
        };
        header?: never;
        path: {
          projectId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Project fetched successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success: boolean;
              data: {
                id: string;
                organizationId?: string;
                name: string;
                siteUrl: string;
                icon: string | null;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Project not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Project not found';
              /** @enum {string} */
              code: 'project-not-found';
            };
          };
        };
        /** @description Unprocessable entity */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json':
              | {
                  /** @example false */
                  success: boolean;
                  /** @example {
                   *       "issues": [
                   *         {
                   *           "code": "invalid_type",
                   *           "expected": "string",
                   *           "received": "undefined",
                   *           "path": [
                   *             "projectId"
                   *           ],
                   *           "message": "Required"
                   *         }
                   *       ],
                   *       "name": "ZodError"
                   *     } */
                  error: {
                    issues: {
                      code: string;
                      path: (string | number)[];
                      message?: string;
                    }[];
                    name: string;
                  };
                }
              | {
                  organizationId?: string;
                };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/projects/change-current': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Change current project */
    put: {
      parameters: {
        query?: {
          organizationId?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Change current project request */
      requestBody: {
        content: {
          'application/json': {
            projectId: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success: boolean;
              /** @enum {string} */
              message: 'Current project has changed successfully';
              data: {
                id: string;
                organizationId: string;
                name: string;
                siteUrl: string | null;
                icon: string | null;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Project not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Project not found';
              /** @enum {string} */
              code: 'project-not-found';
            };
          };
        };
        /** @description Unprocessable entity */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json':
              | {
                  /** @example false */
                  success: boolean;
                  /** @example {
                   *       "issues": [
                   *         {
                   *           "code": "invalid_type",
                   *           "expected": "string",
                   *           "received": "undefined",
                   *           "path": [
                   *             "projectId"
                   *           ],
                   *           "message": "Required"
                   *         }
                   *       ],
                   *       "name": "ZodError"
                   *     } */
                  error: {
                    issues: {
                      code: string;
                      path: (string | number)[];
                      message?: string;
                    }[];
                    name: string;
                  };
                }
              | {
                  organizationId?: string;
                };
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/projects/:projectId/services': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get project services */
    get: {
      parameters: {
        query?: {
          organizationId?: string;
        };
        header?: never;
        path: {
          projectId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Project services fetched successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success: boolean;
              data: {
                chat_assistant?: {
                  /** @enum {string} */
                  id: 'chat_assistant' | 'cookie_consent' | 'web_analytics';
                  name: string;
                  active: boolean;
                  features: string[];
                  description: string;
                }[];
                cookie_consent?: {
                  /** @enum {string} */
                  id: 'chat_assistant' | 'cookie_consent' | 'web_analytics';
                  name: string;
                  active: boolean;
                  features: string[];
                  description: string;
                }[];
                web_analytics?: {
                  /** @enum {string} */
                  id: 'chat_assistant' | 'cookie_consent' | 'web_analytics';
                  name: string;
                  active: boolean;
                  features: string[];
                  description: string;
                }[];
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Project not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Project not found';
              /** @enum {string} */
              code: 'project-not-found';
            };
          };
        };
        /** @description Unprocessable entity */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json':
              | {
                  /** @example false */
                  success: boolean;
                  /** @example {
                   *       "issues": [
                   *         {
                   *           "code": "invalid_type",
                   *           "expected": "string",
                   *           "received": "undefined",
                   *           "path": [
                   *             "projectId"
                   *           ],
                   *           "message": "Required"
                   *         }
                   *       ],
                   *       "name": "ZodError"
                   *     } */
                  error: {
                    issues: {
                      code: string;
                      path: (string | number)[];
                      message?: string;
                    }[];
                    name: string;
                  };
                }
              | {
                  organizationId?: string;
                };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/projects/:projectId/services/:serviceId': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Update project service */
    put: {
      parameters: {
        query?: {
          organizationId?: string;
        };
        header?: never;
        path: {
          projectId: string;
          serviceId: 'chat_assistant' | 'cookie_consent' | 'web_analytics';
        };
        cookie?: never;
      };
      /** @description Update project service request */
      requestBody: {
        content: {
          'application/json': {
            active: boolean;
          };
        };
      };
      responses: {
        /** @description Project service updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success: boolean;
              /** @enum {string} */
              message: 'Project service updated successfully';
              data: {
                /** @enum {string} */
                id: 'chat_assistant' | 'cookie_consent' | 'web_analytics';
                name: string;
                active: boolean;
                features: string[];
                description: string;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Project service update is not permitted */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Project service update is not permitted';
              /** @enum {string} */
              code: 'not-permitted-to-update-project-service';
            };
          };
        };
        /** @description Project not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @enum {string} */
              message: 'Project not found';
              /** @enum {string} */
              code: 'project-not-found';
            };
          };
        };
        /** @description Unprocessable entity */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json':
              | {
                  /** @example false */
                  success: boolean;
                  /** @example {
                   *       "issues": [
                   *         {
                   *           "code": "invalid_type",
                   *           "expected": "string",
                   *           "received": "undefined",
                   *           "path": [
                   *             "projectId"
                   *           ],
                   *           "message": "Required"
                   *         }
                   *       ],
                   *       "name": "ZodError"
                   *     } */
                  error: {
                    issues: {
                      code: string;
                      path: (string | number)[];
                      message?: string;
                    }[];
                    name: string;
                  };
                }
              | {
                  organizationId?: string;
                };
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: never;
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
